<template>
  <el-main class="bank-account-main">

       <!-- 인증서 소개 및 인증서 고객 구분 -->
          <p style="padding-top:20px;
                    font-size:15px;
                    color:#212121;
                    text-align:center;
                    line-height:25px;">
          안정성을 인정 받은</p>

          <p style="padding-top:20px;
                    font-size:20px;
                    color:#212121;
                    text-align:center;
                    line-height:25px;">
          마이키핀 가상자산인증서</p>

          <p style="padding-top:20px;
                    font-size:15px;
                    color:#212121;
                    text-align:center;
                    line-height:25px;">
          고객님의 <span style="font-weight:bold">개인정보보호</span>를 위해 </p>

          <p style="padding-top:20px;
                    font-size:15px;
                    color:#212121;
                    text-align:center;
                    line-height:25px;">
          KOVEX는 마이키핀과 함께 합니다. </p>    

          <div style="margin-top:28px;
                      padding:20px 15px;
                      background:#FFFFFF;
                      text-align: center;">
                <img :src="require('@/images/@temp/mykeypin.png')"  alt="mykeypin">
          </div> 
          
          <div style="margin-top:28px;
                      padding:20px 15px;
                      background:#FFFFFF;">
              <el-row type="flex" justify="center">
                <el-col :span="20" style="margin:auto">            
                  <el-button round  style="background-color:#3f50b4;color:white;width:100%;height:50px;" @click="checkCert">인증서를 사용중입니다.
                  </el-button>          
                </el-col>         
              </el-row>
              <el-row type="flex" justify="center">
                <el-col :span="20" style="margin-top:20px">
                  <el-button round style="background-color:#white;color:#3f50b4;border:1px solid;width:100%;height:50px;" @click="appRegiGuide">인증서가 아직 없어요.
                  </el-button>     
                </el-col>         
              </el-row>
          </div>

	</el-main>
</template>

<script>
import { myKeepInVerifyAuthInfo, myNodeServerAuthVerify, myNodeServerAuth } from '@/api/myKeepinRequest';
export default {
	components: {      
	},
	data () {
		return {         
      mykeepinDivName: 'MyKeepinDIV', //2021.07.13 by lyk - 모바일 앱 마이키핀 설정 : 연동 식별자
      serviceIdData : 'd5abd0d9-4dc1-4a0f-84ce-89df21f46a5e', 
      stateData:'',     //SP 서버에서 생성한 값
      codeData:'',      //인증서버에서 받아온 값
      didData:'',       //사용자의 DID 를 알고 있는 경우 설정
                        //MyKeepin 앱에 did가 다르면 에러코드 '2'반환
      dataHashData:'',  //요청내용에 대한 hash 값
                        //인증 요청에 대한 데이터를 해시한 hex string 값
                        //SP 서버에서 서명 검증시 동일한 방법으로 구해야 함.
                        //null 가능
      vpData:'',
      signatureData:'',

      //credentialData: [],
      ci :'',
      name :'',
      dateOfBirth :'',
      gender :'',
      nationality :'',
      mobileNumber :'',
      di :'',
      telecom  :'',

      //SP서버 에 보낸 데이터 검증요청 결과값
      dataVerification:''
         
		};
	},
	methods : {
    //UUID 생성
    guid() {
      function _s4() {
        return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
      }
      return _s4() + _s4() + '-' + _s4() + '-' + _s4() + '-' + _s4() + '-' + _s4() + _s4() + _s4();
    },  
    checkCert(){
      let self = this
      // 1) App 설치 여부  -- 앱에서 체크
      //  미설치시 앱설치페이지이동
      // if (window.localStorage.getItem('os_div') == '1') { //안드로이드
      //     window.open("https://play.google.com/store/apps/details?id=com.coinplug.mykeepin", "_blank")    
      // } else if (window.localStorage.getItem('os_div') == '2') { //iOS
      //     window.open("https://apps.apple.com/kr/app/mykeepin-%EC%BD%94%EC%9D%B8%ED%94%8C%EB%9F%AC%EA%B7%B8-%EB%94%94%EC%A7%80%ED%84%B8-id/id1479166844", "_blank")    
      // }    

     
      //2021.07.13 by lyk - 모바일 앱 마이키핀 설정 : 코벡스 앱을 통해 마이키핀 인증 앱 실행 >>
       if (afc.isDevice) {
          /*
          [인증유형]
          1	회원가입	Register	KVSignupPresentation
          2	간편로그인	Login(Sign-in)	KVLoginPresentation
          3	계좌만들기(주민등록증)	Open Account	KVIdentityPresentation
          4	본인인증	Identity verification	KVVerificationPresentation
          5	계좌만들기(운전면허증)	Open Account	KVIdPresentation2
          */
          cordova.exec( null , null, "AppPlugin" , "goMyKeepin", [ "1" ]);
      }
      //2021.07.13 by lyk - 모바일 앱 마이키핀 설정 : 코벡스 앱을 통해 마이키핀 인증 앱 실행 <<
      
    }, 
    //2021.07.13 by lyk - 모바일 앱 마이키핀 설정 - 앱에서 마이키핀 앱 인증 성공 후 화면에서 전달 받는 함수 >>
    onMyKeepinRecvData(state, type, code) {
      let self = this

      // alert("MyKeepinApp.onMyKeepinRecvData:"+state+","+type+","+code);

      if(state == "onNotInstall" || state == "onNeedUpdate") {
        if (window.localStorage.getItem('os_div') == '1') { //안드로이드
          // window.open("https://play.google.com/store/apps/details?id=com.coinplug.mykeepin", "_blank")    
          // location.href = "https://play.google.com/store/apps/details?id=com.coinplug.mykeepin";
          location.href = "market://details?id=com.coinplug.mykeepin";
        } else if (window.localStorage.getItem('os_div') == '2') { //iOS
          window.open("https://apps.apple.com/kr/app/mykeepin-%EC%BD%94%EC%9D%B8%ED%94%8C%EB%9F%AC%EA%B7%B8-%EB%94%94%EC%A7%80%ED%84%B8-id/id1479166844", "_blank")    
        }
      } else {
        //인증서버와 데이터 검증 후 완료되면 아래 페이지로 이동
        // 회원가입 완료 페이지로 이동
        if(state != "" && type != "" && code != "") {
           //페이지 이동
          // self.$router.replace({name: 'mMobileIdConfirmed'});
            self.getMyKeepInVerifiedResult(state,code )
        } else {
          // alert("MyKeepinApp.not working:"+state+","+type+","+code);
          console.log("MyKeepinApp.not working:", state+","+type+","+code);
        }
      }
    },
    //2021.07.13 by lyk - 모바일 앱 마이키핀 설정 - 앱에서 마이키핀 앱 인증 성공 후 화면에서 전달 받는 함수 <<
    //인증서버에 인증요청
    getMyKeepInVerifiedResult(dt1, dt2){
      let self = this
      myKeepInVerifyAuthInfo({ //-> did vp, signature 값을 받아옴    
        stateData: dt1,
        codeData:  dt2     
      })
      .then(res => {
        console.log("Success:myKeepInVerifyAuthInfo");       
        self.didData = res.did
        self.vpData = res.vp
        self.signatureData = res.signature
        self.stateData = dt1
        self.codeData = dt2
        
       console.log("didData : "+  self.didData )
       console.log("vpData :"+  self.vpData )
       console.log("signatureData :"+  self.signatureData )      
       console.log("stateData :"+  self.stateData )
       console.log("codeData :"+  self.codeData )       

        self.getUserInfoVerifiedResult()
        
        return

      }).catch(err => {
        if(typeof err.status != "undefined" && err.status != '200')
        {
            console.log(new Error( err.status + ": Request is failed" ));     
            self.$alert(self.$t('mykeepin_err.' + err.status ), '', {
              dangerouslyUseHTMLString: true,
              confirmButtonText: self.$t('sys_err.a001')
            });            
            return         
        }
      })    
    },
    //사용자데이터검증
    getUserInfoVerifiedResult()
    { 
        let self = this
        myNodeServerAuthVerify({   

          didData:  self.didData,   
          stateData: self.stateData,
          typeData: '1',
          codeData: self.codeData,
          signatureData:  self.signatureData

        }).then(res => {       
          //데이터 검증 성공
          if(res == true )
          {
              console.log("Success:myNodeServerAuthVerify");
              self.dataVerification = true
              //사용자정보 가져옴
              self.getUserInfo()
          }
          else{   //데이터 검증 실패
              self.$alert('인증에 실패했습니다.<br> 마이키핀 계정정보를 다시 확인해주세요.', '', {
                  dangerouslyUseHTMLString: true,
                  confirmButtonText: self.$t('sys_err.a001')
              });
          }  
          return      

        }).catch(err => {
          if(typeof err.status != "undefined" && err.status != '200')
          {
              console.log(new Error( err.status + ": Request is failed" ));   
              self.$alert(self.$t('mykeepin_err.' + err.status ), '', {
                dangerouslyUseHTMLString: true,
                confirmButtonText: self.$t('sys_err.a001')
              });                      
            return  
          }   
        })    
    },
    //사용자정보 받아옴
    getUserInfo()
    { 
        let self = this
        //사용자정보 받아옴
        myNodeServerAuth({        
          didData:  self.didData,   
          vpData: self.vpData       
        }).then(res => {           
          
          //데이터 검증 성공        
          //self.credentialData = res
           self.ci = res[5].vc.credentialSubject.ci 
           self.name = res[0].vc.credentialSubject.name
           self.dateOfBirth = res[1].vc.credentialSubject.dateOfBirth
           self.gender = res[2].vc.credentialSubject.gender
           self.nationality = res[3].vc.credentialSubject.nationality 
           self.mobileNumber = res[4].vc.credentialSubject.mobileNumber
           self.di = res[6].vc.credentialSubject.di
           self.telecom = res[7].vc.credentialSubject.telecom

           self.$store.state.user.registration.authCi =  self.ci
           self.$store.state.user.registration.mobileNo =  self.mobileNumber 

            console.log("Success:myNodeServerAuth");
          //  console.log("credentialData:" + JSON.stringify( self.credentialData));             
            console.log("auth_ci:"+ self.ci)       
          // credentialData:[{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"9e478018-6556-4c81-bdd8-6018f3d29f5c","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","NameCredential"],"credentialSubject":{"name":"오건"}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"e1bc68cb-2228-4a68-8d0f-330fe0632daf","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","DateOfBirthCredential"],"credentialSubject":{"dateOfBirth":"19810114"}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"8fe08630-0b1f-4430-a9b5-93fcbe280de3","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","GenderCredential"],"credentialSubject":{"gender":"1"}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"db20b8f0-5b10-4ce6-b86b-ce5ca6c68f7f","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","NationalityCredential"],"credentialSubject":{"nationality":"1"}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"5ab98bdd-723a-4093-a3b1-8c4e666e9d92","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","MobileNumberCredential"],"credentialSubject":{"mobileNumber":"01094898114"}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"4575fef9-9443-4fd1-8cc3-a692223064d5","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","CiCredential"],"credentialSubject":{"ci":"nxnluP/9PdyIxtsqgi5mHuXiAjc1ziIDCTR5qx+e61wDdvyQPB0X0pQl/cM3CuW6wsv8bt+032b/qSbXn9bFVw=="}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"492ab8f3-9094-4bc0-96de-75088b75abba","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","DiCredential"],"credentialSubject":{"di":"MC0GCCqGSIb3DQIJAyEAJg8JPWGOjnWJW9SZ4iopbZ+uRl6tzP9TiHou0zID55c="}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"},{"sub":"did:meta:000000000000000000000000000000000000000000000000000000000004a22f","iss":"did:meta:000000000000000000000000000000000000000000000000000000000000052f","exp":1687964399,"iat":1624929536,"nonce":"3f578902-aff0-4869-ae07-c7b168ec75a7","vc":{"@context":["https://w3id.org/credentials/v1"],"type":["VerifiableCredential","TelecomCredential"],"credentialSubject":{"telecom":"05"}},"jti":"https://attestator.metadium.com/credentials/xQg8x7W-R6OEXjMI0hJ1VA"}]
            self.regiMobileVerifiedInfo()          
            
          return  
        }).catch(err => {
          if(typeof err.status != "undefined" && err.status != '200')
          {
            console.log(new Error( err.status + ": Request is failed" ));   
            self.$alert(self.$t('mykeepin_err.' + err.status ), '', {
              dangerouslyUseHTMLString: true,
              confirmButtonText: self.$t('sys_err.a001')
            });      
            return
          }   
        })
    },  
    
    //회원가입 정보 저장 
    regiMobileVerifiedInfo() {
       	let self = this;       

        console.log("auth_ci:"+ self.ci)
        console.log("user_nm:"+ self.name)
        console.log("user_brth_day:"+ self.dateOfBirth)
        console.log("user_gend:"+ self.gender)
        console.log("user_forn_tp:"+ self.nationality)
        console.log("auth_mobl_no:"+ self.mobileNumber)
        console.log("auth_di:"+ self.di)
        console.log("mobl_corp:"+ self.telecom)

        console.log("use_terms1:"+ self.$store.state.user.registration.use_terms1)
        console.log("use_terms2:"+ self.$store.state.user.registration.use_terms2)
        console.log("use_terms3:"+ self.$store.state.user.registration.use_terms3)
    
        self.$socket.sendProcessByName('ac102', (queryData) => {
          var block = queryData.getBlockData('InBlock1')[0];
          block['auth_ci'] = self.ci
          block['user_nm'] = self.name  
          block['user_brth_day'] = self.dateOfBirth// 생년월일(yyyyMMdd)
          block['user_gend'] = self.gender// 0: 여성, "1": 남성
          block['user_forn_tp'] = self.nationality// 1: 내국인, "2": 외국인
          block['auth_mobl_no'] = self.mobileNumber// - 없이 숫자만
          block['auth_di'] = self.di
          block['mobl_corp'] = self.telecom
          block['use_terms'] = self.$store.state.user.registration.use_terms1//
          block['prv_info_proc'] = self.$store.state.user.registration.use_terms2//
          block['event_noti'] = self.$store.state.user.registration.use_terms3//
         console.log("block:" + JSON.stringify(block))
      }, function (queryData) {          

          if (queryData != null) {
              let OutBlock1 = queryData['queryObj']['OutBlock1'][0];
           
              if (OutBlock1 != null)                
              {              
                    self.$store.state.user.registration.userId = OutBlock1['user_id']                   
                    self.$store.state.user.registration.userGrpId = OutBlock1['user_grp_id']
                    self.$store.state.user.registration.switchIp = OutBlock1['switch_ip']
                    self.$store.state.user.registration.userNm =  self.name 

                    console.log("user_id:"+ OutBlock1['user_id'])
                    console.log("user_grp_id:"+ OutBlock1['user_grp_id'])
                    console.log("switch_ip:"+ OutBlock1['switch_ip'])

                     self.getAccLoginInfo()                           
              }           
              
          } else {
            console.log('휴대폰본인확인정보등록 실패')
            // 전문 에러 언어팩 적용
            const errorData = JSON.parse( window.sessionStorage.getItem('lastErrorData') );
            if (errorData.trName != "ac102") return

                if(errorData.errCode == '49044')  //19세 미만 회원가입 시도
                {
                  self.$router.push({name: 'mRegiRefused'});  
                }else if(errorData.errCode == '49042') //이미 가입완료된 회원입니다.
                {
                  //회원가입불가 페이지로 이동  
                  self.$router.push({name: 'mRegiFail'});  
                }     

                return;
          }
        })      
    },   
    //계정로그인처리
    getAccLoginInfo()
    {
       	let self = this;  
          //prelogin, login 처리 회원가입후 자동로그인처리
        self.$store.dispatch('preLogin', {
          auth_ci: self.ci
        }).then((data) => {

            console.log('preLogin Success')

            let userId = data.user_id    
            let unitCode = data.unit_code
            let userGrpId = data.user_grp_id
            let switchIp = data.switch_ip

            console.log("prelogin_userId:" + userId)
           
            //login 처리
            if(userId != '' &&  unitCode != ''){
                self.$store.dispatch('login', {
                    user_id : userId, 
                    auth_mobl_no :  self.mobileNumber 
                }).then((data) => {
                    
                    console.log('login Success')                                                        
                
                    //회원가입완료 페이지로 이동    
                    self.$router.push({name: 'mRegiComplete', params:{ci: self.ci}});   
                });
            }        
          }, (errorData) => {                    
              // 전문 호출 에러 메시지 언어팩 적용
              self.$alert(self.$t('sys_err.' + errorData.errCode), '', {
                dangerouslyUseHTMLString: true,
                confirmButtonText: self.$t('sys_err.a001')
              });                     
          })                   

    },
    appRegiGuide(){
      //마이키핀App 미설치시 안내 페이지로 이동 
      this.$router.replace({name: 'mAppInstallGuide'});

      //마이키핀App 설치 및 마이키핀회원가입완료후 이동
      //this.$router.replace({name: 'mMobileIdConfirmed'});
    },


	},
  created() {
    this.$EventBus.$emit("mobile-nav-title", "");
    this.$EventBus.$emit('mobile-nav-menus', ['back','noDefault','close']);
    MyKeepinManager.setDelegator(this); //2021.07.13 by lyk - 모바일 앱 마이키핀 설정 : delegator 설정
  }
};

</script>
