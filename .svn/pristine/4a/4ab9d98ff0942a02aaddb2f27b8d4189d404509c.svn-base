<!DOCTYPE html>
<html lang="en">
<style>
    * {
        margin:0;
        padding:0;
    }
    html {
        width: 100%;
        height : 100%;
        overflow-y:hidden;
    }
    body {
        width : 100%;
        height : 100%;
        overflow : hidden;
    }
    iframe {
        overflow : hidden;
    }
</style>
<head>
    <meta charset="UTF-8">

    <meta name="viewport" content="user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width">
    <!-- <meta name="viewport" content="width=device-width, maximum-scale=1.0, minimum-scale=1.0, initial-scale=1.0, user-scalable=no" /> -->
    <title>Title</title>
</head>
<body>
<script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
<script>
  new daum.Postcode({
    oncomplete: function(data) {
      if(data.userSelectedType=="R"){

        // 도로명 주소의 노출 규칙에 따라 주소를 조합한다.
        // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
        let fullRoadAddr = data.roadAddress; // 도로명 주소 변수
        let extraRoadAddr = ""; // 도로명 조합형 주소 변수

        // 법정동명이 있을 경우 추가한다. (법정리는 제외)
        // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
        if (data.bname !== "" && /[동|로|가]$/g.test(data.bname)) {
         extraRoadAddr += data.bname;
        }

        // 건물명이 있고, 공동주택일 경우 추가한다.
        if (data.buildingName !== "" && data.apartment === "Y") {
            extraRoadAddr +=
                extraRoadAddr !== ""
                ? ", " + data.buildingName
                : data.buildingName;
        }

        // 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
        if (extraRoadAddr !== "") {
         extraRoadAddr = " (" + extraRoadAddr + ")";
        }
        // 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.
        if (fullRoadAddr !== "") {
          fullRoadAddr += extraRoadAddr;
        }

        // this.addrProcess(data.zonecode, fullRoadAddr);
        window.kovexApp.setAddress(data.zonecode, fullRoadAddr, data.buildingName);

        // if(data.autoJibunAddress) {
        //     window.kovexApp.setAddress(data.zonecode, data.autoJibunAddress, data.buildingName);
        // } else {
        //     window.kovexApp.setAddress(data.zonecode, data.jibunAddress, data.buildingName);
        // }
      }
      else{
        window.kovexApp.setAddress(data.zonecode, data.jibunAddress, data.buildingName);
      }


       // var e = {};
        // e.data = JSON.parse(data);
        // alert("oncomplete.data:"+data);
        //e.data = data;
        // window.kovexApp.setAddress(data.address, data.addressType, data.roadAddress)
        // postCodeCallbackFunc(e); //이 방식으로는 웹뷰에서 처리가 안됨
    },
     width : '100%',
     height : '100%',
 
     }).embed(document.body);

     function postCodeCallbackFunc(e) {
        alert("e.data:"+e.data.roadAddress);
        if (e.data) {
            var params = { bubbles: false, cancelable: false, detail: e.data };
            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent('postCodeCallback', params.bubbles, params.cancelable, params.detail);
            window.dispatchEvent(evt);
        }
        alert("window.close.data");
        window.close();
    }
</script>
</body>
</html>